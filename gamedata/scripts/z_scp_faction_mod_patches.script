---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) :  Tosox, AlienProduct	                                                                 ---
---    Edited : N/A                                                                                                  ---
---    Date : 15/10/2023                                                                                             ---
---    						                                                                                         ---
---                                                                                                                  ---
---==================================================================================================================---

--============================= _g =============================--
_G.squad_community_by_behaviour["scp"] = "scp"

local orig_is_story_player = _G.IsStoryPlayer
function _G.IsStoryPlayer()
	return orig_is_story_player() or (gameplay_disguise.get_default_comm() == "scp")
end

--====================== death_manager =========================--
local orig_init_drop_settings = death_manager.init_drop_settings
function death_manager.init_drop_settings()
	orig_init_drop_settings()

	local death_ini = itms_manager.ini_death
	local ranks = { "", "_novice" , "_trainee", "_experienced", "_professional", "_veteran", "_expert", "_master", "_legend" }
	local private = { "", "_private" }

	for _, v2 in pairs(private) do
		for _, v3 in pairs(ranks) do
			local x = "scp" .. v2 .. v3
			death_manager.item_by_community[x] = {}
			if death_ini:section_exist(x) then
				local n = death_ini:line_count(x)
				local id, value = "", ""
				local cnt = 0
				for i = 0, n - 1 do
					_, id, value = death_ini:r_line_ex(x, i, "", "")
					local temp = not (death_ini:line_exist("exclude_from_multi", id)) and diff_multi or 1
					cnt = cnt + 1
					death_manager.item_by_community[x][cnt] = {}
					death_manager.item_by_community[x][cnt].sec = id
					death_manager.item_by_community[x][cnt].cha = value and tonumber(value) * temp or 0
				end
				shuffle_table(death_manager.item_by_community[x])
			end
		end
	end
end

local orig_get_comb_coeff = death_manager.get_comb_coeff
function death_manager.get_comb_coeff(rank, comm)
	local rank_coeffs_table = { novice = 0.3, trainee = 0.4, experienced = 0.5, professional = 0.6, veteran = 0.7, expert = 0.8, master = 0.9, legend = 1 }
	local scp_comb_coeff = 29

	if comm == "scp" then
		local rank_coeff = rank_coeffs_table[rank] or 0
		return rank_coeff * scp_comb_coeff / (rank_coeffs_table.legend * 30) -- comm_coeffs_table.monolith = 30
	else
		return orig_get_comb_coeff(rank, comm)
	end
end

-- Skipped editing simulate_death_drops because it is an unused debug function

--==================== debug_cmd_list =======================--
local orig_cmd_relations = debug_cmd_list.cmd.relations
function debug_cmd_list.cmd.relations(me, txt, owner, p)
	local orig_ret = orig_cmd_relations(me, txt, owner, p)
	owner:SendOutput("SCP = %s", relation_registry.community_goodwill("scp", 0))
	return orig_ret
end

--================== dynamic_news_manager ====================--
local orig_dynamic_news_manager_init = dynamic_news_manager.DynamicNewsManager.__init
function dynamic_news_manager.DynamicNewsManager.__init(self)
	orig_dynamic_news_manager_init(self)

	self.channel_status["scp"] = true
	self.queue["scp"] = {}
	self.mono["scp"] = true
	self.unknown["scp"] = true
end

--================== ui_pda_relations_tab ====================--
local orig_pda_relations_init_controls = ui_pda_relations_tab.pda_relations_tab.InitControls
function ui_pda_relations_tab.pda_relations_tab.InitControls(self)
	-- This replaces the monolith in the PDA relations tab
	-- Unfortunately the PDA can't show any more than 9 factions without text overflow (probably requires to edit the xml)
	-- This addon can help maybe https://www.moddb.com/mods/stalker-anomaly/addons/show-all-faction-relation-in-pda-except-monolith
	local actor_comm = get_actor_true_community()

	if not dmg_safr_pda_mcm then
		if actor_comm == "scp" then
			self.list[9] = "scp"
		end
	end
	orig_pda_relations_init_controls(self)
end

function on_game_start()
    if dmg_safr_pda_mcm then
        ui_pda_relations_tab.enc_ref_list = { 
            "loner", 
            "duty", 
            "freedom", 
            "clear_sky", 
            "ecologist", 
            "mercenary", 
            "scp",
            "military", 
            "isg", 
            "renegade", 
            "bandit", 
            "greh", 
            "monolith", 
            "zombified"
        }
    
        ui_pda_relations_tab.faction_code_list = { 
            "stalker", 
            "dolg", 
            "freedom", 
            "csky", 
            "ecolog", 
            "killer",
            "scp", 
            "army", 
            "isg", 
            "renegade", 
            "bandit", 
            "greh", 
            "monolith", 
            "zombied"
        }
    end
end

--===================== warfare_names ========================--
local orig_refresh_strings = warfare_names.refresh_strings
function warfare_names.refresh_strings()
	orig_refresh_strings()

	warfare_names.faction_names["scp"] = game.translate_string("scp")	
end

--==================== warfare_factions =======================--
table.insert(warfare_factions.factions, "scp")
table.insert(warfare_factions.all_factions, "scp")
warfare_factions.factions_p["scp"] = true

--======================== warfare ============================--
warfare.registered_squads["scp"] = {}

function warfare.get_squad_section_faction(squad_section)
	if string.find(squad_section,"scp") or string.find(squad_section,"foundation") then
		return "scp"
	end

function warfare.is_squad_section_enemy_of_faction(squad_section, faction)
	if string.find(squad_section,"scp") or string.find(squad_section,"foundation") then
		return "scp"
	end
--================= ui_warfare_options_hints ===================--
ui_warfare_options_hints.squad_names["eng"] = {
	["scp_sim_squad_novice"]                                     	 = "scp (Novice)",
	["scp_sim_squad_novice_3_4"]                                 	 = "scp (Novice)",
	["scp_sim_squad_advanced"]                                   	 = "scp (Advanced)",
	["scp_sim_squad_advanced_3_4"]                               	 = "scp (Advanced)",
	["scp_sim_squad_veteran"]                                    	 = "scp (Veteran)",
	["scp_sim_squad_veteran_3_4"]                                	 = "scp (Veteran)",
}
--=================== sim_squad_warfare =======================--
sim_squad_warfare.squad_icons["scp"] = "warfare_scp_spot"

--===================== smart_terrain ========================--
smart_terrain.squads_by_faction["scp"] = "scp_sim_squad_novice, scp_sim_squad_advanced, scp_sim_squad_veteran"

--================== smart_terrain_warfare ====================--
smart_terrain_warfare.pda_icons["scp"] = "circle_scp"

--=================== faction_expansions ======================--
faction_expansions.faction_list["scp"] = "scp"

local orig_on_game_start = faction_expansions.on_game_start
function faction_expansions.on_game_start()
	orig_on_game_start()

	local ini_fact = ini_file("plugins\\faction_profile.ltx")

	faction_expansions.faction["scp"] = {}
	faction_expansions.faction["scp"]["type"] = ini_fact:r_string_ex("scp", "type") or "group"
	local color = parse_list(ini_fact, "scp", "color")
	faction_expansions.faction["scp"]["color"] = strformat("%c[%s,%s,%s,%s]", color[1], color[2], color[3], color[4])
	faction_expansions.faction["scp"]["territory"] = ini_fact:r_string_ex("scp", "territory")
		
	faction_expansions.faction["scp"]["level_presence"] = parse_list(ini_fact, "scp", "level_presence", true)
	faction_expansions.faction["scp"]["pda_topic"] = {}
	local pda_topics = parse_list(ini_fact, "scp", "pda_topic")
	for i = 1, #pda_topics do
		for k1, v1 in string.gmatch(pda_topics[i], "([%w_%-%s%.]+)=([%w_%-%s%.]+)") do
			faction_expansions.faction["scp"]["pda_topic"][k1] = tonumber(v1)
		end
	end
	faction_expansions.faction["scp"]["pda_topic_mission"] = parse_list(ini_fact, "scp", "pda_topic_mission")
	faction_expansions.faction["scp"]["weapon"] = ini_fact:r_string_ex("scp", "weapon")
		
	faction_expansions.faction["scp"]["leader"] = ini_fact:r_string_ex("scp", "leader")
	faction_expansions.faction["scp"]["trader"] = ini_fact:r_string_ex("scp", "trader")
	faction_expansions.faction["scp"]["mechanic"] = ini_fact:r_string_ex("scp", "mechanic")
	faction_expansions.faction["scp"]["medic"] = ini_fact:r_string_ex("scp", "medic")
	faction_expansions.faction["scp"]["barman"] = ini_fact:r_string_ex("scp", "barman")
	faction_expansions.faction["scp"]["guide"] = ini_fact:r_string_ex("scp", "guide")
		
	faction_expansions.faction["scp"]["leader_name"] = ini_fact:r_string_ex("scp", "leader_name")
	faction_expansions.faction["scp"]["trader_name"] = ini_fact:r_string_ex("scp", "trader_name")
	faction_expansions.faction["scp"]["mechanic_name"] = ini_fact:r_string_ex("scp", "mechanic_name")
	faction_expansions.faction["scp"]["medic_name"] = ini_fact:r_string_ex("scp", "medic_name")
	faction_expansions.faction["scp"]["barman_name"] = ini_fact:r_string_ex("scp", "barman_name")
	faction_expansions.faction["scp"]["guide_name"] = ini_fact:r_string_ex("scp", "guide_name")
end

--===================== game_relations ========================--
table.insert(game_relations.factions_table, "scp")
table.insert(game_relations.factions_table_all, "scp")
table.insert(game_relations.factions_table_all, "actor_scp")

--==================== gameplay_disguise ======================--
gameplay_disguise.blacklisted_factions["scp"] = true
gameplay_disguise.possible_factions["scp"] = true

--==================== ui_debug_launcher ======================--
local orig_debug_launcher_init_controls = ui_debug_launcher.UIDebug_FactionSwitch.InitControls
function ui_debug_launcher.UIDebug_FactionSwitch.InitControls(self)
	table.insert(self.factions, "scp")
	orig_debug_launcher_init_controls(self)
end

--=================== tasks_ ====================================--

--=================== _bounty ====================================--
tasks_bounty.faction_list["scp"] = "scp"

--=================== _fetch ====================================--
tasks_fetch.faction_list["scp"] = "scp"
table.insert(tasks_fetch.patch_general, "scp", 
{
	["bandit_patch"]     = 0,
	["renegade_patch"]   = 0,
	["monolith_patch"]   = 0,
	["dolg_patch"]       = 0,
})
table.insert(tasks_fetch.patch_general, "dolg", 
{
	["scp_patch"]        = 0,
})